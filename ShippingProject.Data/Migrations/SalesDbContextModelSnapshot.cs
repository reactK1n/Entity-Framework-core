// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesOrderProject.Data;

namespace SalesOrderProject.Data.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    partial class SalesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SalesOrderProject.Model.Address", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Category", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Customer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("addressId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("addressId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Order", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("orderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("supplierId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SalesOrderProject.Model.OrderDetail", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.HasIndex("orderId")
                        .IsUnique()
                        .HasFilter("[orderId] IS NOT NULL");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Product", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("categoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("categoryId");

                    b.HasIndex("orderDetailId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Supplier", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("organisationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("organisationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Customer", b =>
                {
                    b.HasOne("SalesOrderProject.Model.Address", "address")
                        .WithMany()
                        .HasForeignKey("addressId");

                    b.Navigation("address");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Order", b =>
                {
                    b.HasOne("SalesOrderProject.Model.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerId");

                    b.HasOne("SalesOrderProject.Model.Supplier", "supplier")
                        .WithMany("order")
                        .HasForeignKey("supplierId");

                    b.Navigation("customer");

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("SalesOrderProject.Model.OrderDetail", b =>
                {
                    b.HasOne("SalesOrderProject.Model.Order", "order")
                        .WithOne("orderDetail")
                        .HasForeignKey("SalesOrderProject.Model.OrderDetail", "orderId");

                    b.Navigation("order");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Product", b =>
                {
                    b.HasOne("SalesOrderProject.Model.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryId");

                    b.HasOne("SalesOrderProject.Model.OrderDetail", "orderDetail")
                        .WithMany("product")
                        .HasForeignKey("orderDetailId");

                    b.Navigation("category");

                    b.Navigation("orderDetail");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Order", b =>
                {
                    b.Navigation("orderDetail");
                });

            modelBuilder.Entity("SalesOrderProject.Model.OrderDetail", b =>
                {
                    b.Navigation("product");
                });

            modelBuilder.Entity("SalesOrderProject.Model.Supplier", b =>
                {
                    b.Navigation("order");
                });
#pragma warning restore 612, 618
        }
    }
}
